real L=1;
int gammaB=1, gammaV=2, gammaAir=3;
//hypoderme
real Hh=0.4;
border bas (t=0, L){x=t; y=0; label =gammaB;}
border droith (t=0, Hh){x=L; y=t; label =gammaV;}
border ligne1 (t=L, 0){x=t; y=Hh; label =10;}
border gaucheh (t=Hh, 0){x=0; y=t; label =gammaV;}

//derme
real Hd=0.24;
//border bas=-ligne1 
border droitd (t=0+Hh, Hd+Hh){x=L; y=t; label =gammaV;}
border ligne2 (t=L, 0){x=t; y=Hd+Hh; label =11;}
border gauched (t=Hd+Hh, 0+Hh){x=0; y=t; label =gammaV;}

//epiderme
real He=0.005;
//border bas=-ligne2 
border droite (t=0+Hh+Hd, He+Hh+Hd){x=L; y=t; label =gammaV;}
border ligne3 (t=L, 0){x=t; y=He+Hh+Hd; label =12;}
border gauchee (t=Hd+Hh+He, 0+Hh+Hd){x=0; y=t; label =gammaV;}

//air
real Ha=0.1;
//border bas=-ligne3
border droita (t=0+Hh+Hd+He, Hh+Hd+He+Ha){x=L; y=t; label =gammaV;}
border haut (t=L, 0){x=t; y=Hd+Hh+He+Ha; label =gammaAir;}
border gauchea (t=Hd+Hh+He+Ha, 0+Hh+Hd+He){x=0; y=t; label =gammaV;}

real meshsize=0.01;
int Nx= L/meshsize;
int Nyh=Hh/meshsize;
int Nyd=Hd/meshsize;
int Nye=5;
int Nya=Ha/meshsize;

func bordh = bas(Nx)+droith(Nyh)+ligne1(Nx)+gaucheh(Nyh);
func bordd = droitd(Nyd)+ligne2(Nx)+gauched(Nyd);
func borde = droite(Nye)+ligne3(Nx)+gauchee(Nye);
func borda = droita(Nya)+haut(Nx)+gauchea(Nya);
plot (bordh+bordd+borde+borda);

mesh Th = buildmesh(bordh+bordd+borde+borda);
plot(Th);

int regHypoderme=Th(0.1, Hh/2).region;
int regDerme=Th(0.1, Hh+Hd/2).region;
int regEpiderme=Th(0.1, Hh+Hd+He/2).region;
int regAir=Th(0.1, Hh+Hd+He+Ha/2).region;

cout << "Hypoderme has region number " << regHypoderme << endl;
cout << "Derme has region number " << regDerme << endl;
cout << "Epiderme has region number " << regEpiderme << endl;
cout << "Air has region number " << regAir << endl;


fespace Vh(Th, P1);
Vh Tn0, Tn, Tn1, Tp; //T(n-1) T(n) T(n+1) T'
macro grad(u) [dx(u), dy(u)]//

//Peu etre generer un nouveau maillage avec trunc
//puis un nouvel espace
Vh phi, phip, s;
real[int] muatab=[0.5, 2.2, 21];
func mua = muatab[0]*(region==regHypoderme) 
    +muatab[1]*(region==regDerme)
    + muatab[2]*(region==regEpiderme);
real[int] mustab=[100, 156, 530];
func mus = mustab[0]*(region==regHypoderme)
    + mustab[1]*(region==regDerme)
    + mustab[2]*(region==regEpiderme);
real g=0.79;
//real[int] LL=[0, -1];

func gamma = mua + (1 - g)*mus;
func D = 1/(3*gamma);
//resolution
problem source(phi,phip) =
    int2d(Th)(mua*phi*phip)
    +int2d(Th)(D*grad(phi)'*grad(phip))
    +int2d(Th)([0,-1]'*grad(phi)*phip)
    +on(gammaAir,phi=1); //definir gammaApp ou une gaussienne
func lambda=mua*phi;
func real pulse(int t){return t%2;}
s=lambda*pulse(3);

//Temps
real t=0;
real dt=100; //secondes
real tfinal=60*60*10; // 10 heures
int iter=0, niter=tfinal/dt;

// Constantes physiques
real gb=36, Text=20, a=10000;

// Tableau et fonction permettant de dÃ©finir les constantes dans chaque domaine
real[int] rhotab = [ 1.2, 1.2, 1.2 ,1.2e-3 ];
func rho = rhotab[0]*(region==regHypoderme) + rhotab[1]*(region==regDerme) + rhotab[2]*(region==regEpiderme) + rhotab[3]*(region==regAir);

real[int] Ktab = [ 46, 53, 21, 2.34 ];
func K = Ktab[0]*(region==regHypoderme) + Ktab[1]*(region==regDerme) + Ktab[2]*(region==regEpiderme) + Ktab[3]*(region==regAir);

real[int] Ctab = [ 3.8, 3.8, 3.6, 1.004 ];
func C = Ctab[0]*(region==regHypoderme) + Ctab[1]*(region==regDerme) + Ctab[2]*(region==regEpiderme) + Ctab[3]*(region==regAir);

/*
solve EqChaleur(T,Tp)=int2d(Th)(K*grad(T)'*grad(Tp)) -> vA
+int1d(Th,gammaAir)(a*Tp*T)                         -> vA
-int1d(Th,gammaAir)(a*Text*Tp)                      -> vRHS0
-int2d(Th)(s*Tp)                                    ->vRHS0
+on(gammaB,T=gb);                               -> vA et vRHS0

plot(T,value=1,fill=1);
*/
//1ere iteration avec Euleur Explicite
varf vA(Tn1, Tp)=
    int2d(Th)(rho*C*Tn1*Tp/dt+K*grad(Tn1)'*grad(Tp))
    +int1d(Th,gammaAir)(a*Tp*Tn1)
    +on(gammaB,Tn1=gb);

varf vB(Tn,Tp)=
    int2d(Th)(rho*C*Tn*Tp/dt);

varf vRHS0(Tn1,Tp)=
    int1d(Th,gammaAir)(a*Text*Tp)
    +int2d(Th)(s*Tp)
    +on(gammaB,Tn1=gb);

matrix A=vA(Vh,Vh,solver=CG);
matrix B=vB(Vh,Vh);
real[int] RHS0=vRHS0(0,Vh);

func T0 = Text; //Temperature initiale
Tn1=T0;

Tn=Tn1;
real[int] RHS=RHS0;
RHS+=B*Tn[]; //second membre
Tn1[]=A^(-1)*RHS;
t+=dt;


//On continue avec BDF2 dT/dt=(3*Tn1-4*Tn+*Tn0)/2*dt
varf vA2(Tn1,Tp)=
    int2d(Th)((1.5)*rho*C*Tn1*Tp/dt+K*grad(Tn1)'*grad(Tp))
    +int1d(Th,gammaAir)(a*Tp*Tn1)
    +on(gammaB,Tn1=gb);

varf vB2(Tn,Tp)=
    int2d(Th)(2*rho*C*Tn*Tp/dt);

varf vC2(Tn0,Tp)=
	-int2d(Th)((0.5)*rho*C*Tn0*Tp/dt);

// vRHS0 ne change pas
A=vA2(Vh,Vh,solver=CG);
B=vB2(Vh,Vh);
matrix E=vC2(Vh,Vh);

for(iter=1;iter<niter;++iter){
	Tn0=Tn;
	Tn=Tn1;
	RHS=RHS0;
	RHS+=B*Tn[];
	RHS+=E*Tn0[]; //second membre
	Tn1[]=A^(-1)*RHS;
	t+=dt;
	plot(Tn1,value=1,fill=1,wait=0,cmm=" t "+ t);
}
plot(Tn1,value=1,fill=1,dim=3);

//Compare with only implicit Newton
//Solve coupled equation
//Make Quadranglangle mesh
//Add terme with u
